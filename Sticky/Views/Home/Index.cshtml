@model Sticky.Models.ViewModels.CreateToDoListViewModel

@{
    ViewData["Title"] = "Home";
    var hasTasks = ViewBag.HasTasks as bool?;
}

<div class="container text-center mt-5" style="min-height: calc(100vh - 200px);">
    @if (hasTasks == false)
    {
        <div class="d-flex justify-content-center align-items-center" style="min-height: 65vh;">
            <h3 style="font-family: 'Brush Script MT', cursive; font-weight: bold; font-size: 3em;">Be Productive & Write your Tasks</h3>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var group in Model.ToDoLists)
            {
                <div class="col-md-4">
                    <div class="card mb-3" style="border-radius: 15px;">
                        <div class="card-header" style="background-color: #3cacae; border-top-left-radius: 15px !important; border-top-right-radius: 15px !important;">
                            <strong>@(string.IsNullOrWhiteSpace(group.Name) ? "(No Name)" : group.Name)</strong>
                        </div>
                        <div class="list-group list-group-flush">
                            @foreach (var task in group.Tasks)
                            {
                                <form asp-controller="Task" asp-action="ToggleComplete" method="post" class="toggle-complete-form">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="taskId" value="@task.Id" />
                                    <input type="hidden" name="isCompleted" value="@(!task.IsCompleted)" />
                                    <label class="list-group-item d-flex gap-3">
                                        <input class="form-check-input flex-shrink-0"
                                               type="checkbox"
                                               @(task.IsCompleted ? "checked" : "")
                                               style="font-size: 1.375em;">
                                        <span class="pt-1 form-checked-content">
                                            <strong>@task.Description</strong>
                                        </span>
                                    </label>
                                </form>
                            }
                        </div>
                        <div class="card-footer" style="background-color: #3cacae; border-bottom-left-radius: 15px !important; border-bottom-right-radius: 15px !important;">
                            <form asp-controller="Task" asp-action="DeleteList" method="post" style="display:inline;" onsubmit="return confirm('Are you sure?');">
                                <input type="hidden" name="groupName" value="@group.Name" />
                                <button type="submit" class="btn btn-sm" style="background-color: black; color: white;">Delete</button>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Fixed position '+' button -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1000;">
    <button class="btn btn-light fs-1 rounded-circle" style="width: 70px; height: 70px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);" data-bs-toggle="modal" data-bs-target="#todoModal">
        <i class="bi bi-plus-lg"></i>
    </button>
</div>

<!-- Modal Form -->
<div class="modal fade" id="todoModal" tabindex="-1" aria-labelledby="todoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="todoModalLabel">Create ToDo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="Task" asp-action="Create" method="post" id="todoForm">
                <div class="modal-body">
                    <div class="mb-4">
                        <label for="todoListName" class="form-label">Sticky-Name</label>
                        <input type="text" class="form-control custom-underline-input" name="Name" placeholder="WeekEnd Nights">
                    </div>

                    <div id="tasksContainer">
                        <!-- Initial task input field -->
                        <div class="task-input-row mb-3">
                            <input type="text" name="Descriptions" class="form-control custom-underline-input" placeholder="Task description" required>
                            <button type="button" class="btn btn-outline-success btn-sm add-task-btn ms-2" title="Add another task">
                                <i class="bi bi-plus"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .custom-underline-input {
            border: none;
            border-bottom: 1px solid #ced4da;
            border-radius: 0;
            padding-left: 0;
            box-shadow: none !important;
        }

            .custom-underline-input:focus {
                border-color: #0d6efd;
                box-shadow: none;
            }

        .task-input-row {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .list-group-item {
            transition: background-color 0.2s;
        }

        .form-check-input:checked + .form-checked-content {
            opacity: 0.5;
            text-decoration: line-through;
        }

        .toggle-complete-form {
            margin: 0;
        }

        .list-group-item {
            cursor: pointer;
        }

        .form-check-input {
            cursor: pointer;
        }
        
        .card {
            border-radius: 15px;
            overflow: hidden;
            border: none;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .card-header {
            background-color: #3cacae;
            color: white;
            border-top-left-radius: 15px !important;
            border-top-right-radius: 15px !important;
            border-bottom: none;
        }

        .card-footer {
            background-color: #3cacae;
            border-bottom-left-radius: 15px !important;
            border-bottom-right-radius: 15px !important;
            border-top: none;
        }

        .list-group-item {
            border-left: none;
            border-right: none;
        }

            .list-group-item:first-child {
                border-top: none;
            }

        .btn-black {
            background-color: black;
            color: white;
            border: none;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const tasksContainer = document.getElementById('tasksContainer');

            // Function to create a new task input row
            function createTaskInputRow() {
                const newRow = document.createElement('div');
                newRow.className = 'task-input-row mb-3';
                newRow.innerHTML = `
                    <input type="text" name="Descriptions" class="form-control custom-underline-input" placeholder="Task description" required>
                    <button type="button" class="btn btn-outline-success btn-sm add-task-btn ms-2" title="Add another task">
                        <i class="bi bi-plus"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger btn-sm remove-task-btn ms-2" title="Remove this task">
                        <i class="bi bi-x"></i>
                    </button>
                `;
                return newRow;
            }

            // Event delegation for Add and Remove buttons
            tasksContainer.addEventListener('click', function (e) {
                if (e.target.closest('.add-task-btn')) {
                    const currentRow = e.target.closest('.task-input-row');
                    if (currentRow) {
                        const newRow = createTaskInputRow();
                        currentRow.after(newRow);
                        // Remove the add button from the previous row if it's not the first row
                        if (tasksContainer.children.length > 1) {
                            currentRow.querySelector('.add-task-btn')?.remove();
                        }
                    }
                }

                if (e.target.closest('.remove-task-btn')) {
                    const rowToRemove = e.target.closest('.task-input-row');
                    if (tasksContainer.children.length > 1) {
                        rowToRemove.remove();
                        // Ensure the last row always has an add button
                        const lastRow = tasksContainer.lastElementChild;
                        if (!lastRow.querySelector('.add-task-btn')) {
                            lastRow.innerHTML += `
                                <button type="button" class="btn btn-outline-success btn-sm add-task-btn ms-2" title="Add another task">
                                    <i class="bi bi-plus"></i>
                                </button>
                            `;
                        }
                    } else {
                        // If it's the last row, just clear the input
                        rowToRemove.querySelector('input').value = '';
                    }
                }
            });

            // Clear form when modal is hidden
            document.getElementById('todoModal').addEventListener('hidden.bs.modal', function () {
                document.getElementById('todoForm').reset();
                // Reset to single input field with add button
                tasksContainer.innerHTML = `
                    <div class="task-input-row mb-3">
                        <input type="text" name="Descriptions" class="form-control custom-underline-input" placeholder="Task description" required>
                        <button type="button" class="btn btn-outline-success btn-sm add-task-btn ms-2" title="Add another task">
                            <i class="bi bi-plus"></i>
                        </button>
                    </div>
                `;
            });

            // AJAX for checkbox toggle
            document.querySelectorAll('.form-check-input').forEach(checkbox => {
                checkbox.addEventListener('change', function(e) {
                    e.preventDefault();

                    const form = this.closest('form');
                    const formData = new FormData(form);
                    const content = this.closest('label').querySelector('.form-checked-content');

                    fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Toggle visual state
                            if (this.checked) {
                                content.style.opacity = '0.5';
                                content.style.textDecoration = 'line-through';
                            } else {
                                content.style.opacity = '1';
                                content.style.textDecoration = 'none';
                            }
                        }
                    })
                    .catch(error => console.error('Error:', error));
                });
            });
        });
    </script>
}